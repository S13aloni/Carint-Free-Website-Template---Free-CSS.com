document.getElementById("exportCSV").addEventListener("click", exportToCSV);

function exportToCSV() {
    let csvContent = "data:text/csv;charset=utf-8,";
    let headers = Object.keys(filteredData[0]).filter(key => key !== "Pass_ls" && key !== "Role_ls");
    csvContent += headers.join(",") + "\n";

    filteredData.forEach(row => {
        let rowData = headers.map(header => `"${row[header] || ""}"`).join(",");
        csvContent += rowData + "\n";
    });

    let encodedUri = encodeURI(csvContent);
    let link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute("download", "user_data.csv");
    document.body.appendChild(link);

    let progressBar = document.getElementById("myBar");
    let progressContainer = document.getElementById("myProgress");
    let downloadPDF_div = document.getElementById("downloadPDF_div");

    // Reset progress bar before starting
    progressBar.style.width = "0%";
    progressBar.innerHTML = "0%";
    progressContainer.style.display = "block"; // Show progress bar

    let i = 0;
    if (i == 0) {
        i = 1;
        let width = 0;
        let rowCount = filteredData.length;
        let delay = Math.min(100, rowCount * 5); // Dynamic delay based on row count

        let id = setInterval(frame, delay);
        function frame() {
            if (width >= 100) {
                clearInterval(id);
                i = 0;

                // Show download button after progress completes
                downloadPDF_div.innerHTML = `<button class="export-btn" id="downloadBtn">Download</button>`;
                document.getElementById("downloadBtn").addEventListener("click", function () {
                    link.click();
                    document.body.removeChild(link);
                    progressContainer.style.display = "none"; // Hide progress bar after download
                });

            } else {
                width++;
                progressBar.style.width = width + "%";
                progressBar.innerHTML = width + "%";
            }
        }
    }
}

// pdf file

function file_size_validation() {
    let fileInput = document.getElementById("Certificate");
    let files = fileInput.files;
    let errorMsg = document.getElementById("err_cert");
    let allowedTypes = ["application/pdf"];
    let maxFileSize = 4 * 1024 * 1024; // 4MB in bytes
    let validFiles = []; // Array to store valid PDF files

    // Clear previous errors
    errorMsg.innerHTML = "";

    if (files.length === 0) {
        errorMsg.innerHTML = "At least one PDF is required.";
        errorMsg.style.color = "red";
        return false;
    }

    for (let i = 0; i < files.length; i++) {
        let file = files[i];

        // Check if file type is PDF
        if (!allowedTypes.includes(file.type)) {
            errorMsg.innerHTML = "Invalid file. Only PDF files are allowed.";
            errorMsg.style.color = "red";
            return false;
        }

        // Check file size
        if (file.size > maxFileSize) {
            errorMsg.innerHTML = "File too big. Each file must be less than 4MB.";
            errorMsg.style.color = "red";
            return false;
        }

        // Store valid file
        validFiles.push(file);
    }

    // If all files are valid
    if (validFiles.length > 0) {
        console.log("Valid PDFs:", validFiles);
        return true;
    }
}

//pdf 

let uploadedFiles = []; // Store uploaded PDFs

function file_size_validation() {
    let fileInput = document.getElementById("Certificate");
    let files = fileInput.files;
    let errorMsg = document.getElementById("err_cert");
    let allowedTypes = ["application/pdf"];
    let maxFileSize = 4 * 1024 * 1024; // 4MB

    errorMsg.innerHTML = "";

    if (files.length === 0) {
        errorMsg.innerHTML = "Please select a PDF file.";
        return;
    }

    let file = files[0]; // Only allow one file at a time

    if (!allowedTypes.includes(file.type)) {
        errorMsg.innerHTML = "Invalid file type. Only PDFs allowed.";
        return;
    }

    if (file.size > maxFileSize) {
        errorMsg.innerHTML = "File too big. Max size is 4MB.";
        return;
    }

    uploadedFiles.push(file);
    displayUploadedFiles();
    fileInput.value = "";
}

// Function to show uploaded PDFs
function displayUploadedFiles() {
    let previewContainer = document.getElementById("pdfPreview");
    previewContainer.innerHTML = "";

    uploadedFiles.forEach((file, index) => {
        let fileDiv = document.createElement("div");
        fileDiv.classList.add("pdf-item");
        fileDiv.innerHTML = `
            <span>${file.name} (${(file.size / 1024).toFixed(2)} KB)</span>
            <button class="icon-btn" onclick="previewPDF(${index})">üìÑ</button>
            <button class="icon-btn" onclick="deleteFile(${index})">üóëÔ∏è</button>
        `;
        previewContainer.appendChild(fileDiv);
    });
}

// Function to delete a file
function deleteFile(index) {
    uploadedFiles.splice(index, 1);
    displayUploadedFiles();
}

// Function to preview PDF in modal
function previewPDF(index) {
    let file = uploadedFiles[index];
    let fileURL = URL.createObjectURL(file);
    document.getElementById("pdfViewer").src = fileURL;
    document.getElementById("pdfModal").style.display = "block";
}

// Function to close the modal
function closeModal() {
    document.getElementById("pdfModal").style.display = "none";
    document.getElementById("pdfViewer").src = "";
}

// <div>
//                     <label for="Certificate">Upload Certificate: </label>
//                     <!-- <input type="file" placeholder="Certificate" id="Certificate"  class="file_space" accept=".pdf"/> -->
//                     <input type="file" placeholder="Certificate" id="Certificate"  class="file_space" onchange="file_size_validation()" />
//                     <p id="err_cert"></p>
//                 </div>
//                 <div id="pdfPreview"></div>
//                 <div id="pdfModal" class="modal">
//                   <div class="modal-content">
//                       <span class="close" onclick="closeModal()">&times;</span>
//                       <iframe id="pdfViewer" width="100%" height="500px"></iframe>
//                   </div>
//               </div>

//image preview

function validation_img_file() {
    let fileInput = document.getElementById("Profile_Img");
    let file = fileInput.files[0];
    let errorMsg = document.getElementById("err_img");
    let imgPreviewContainer = document.getElementById("imgPreviewContainer");
    let imgPreview = document.getElementById("imgPreview");
    let deleteImgBtn = document.getElementById("deleteImgBtn");

    let allowedTypes = ["image/jpeg", "image/png", "image/jpg", "image/gif"];
    let maxFileSize = 2 * 1024 * 1024; // 2MB

    errorMsg.innerHTML = "";
    imgPreviewContainer.style.display = "none";

    if (!file) {
        errorMsg.innerHTML = "Please select an image.";
        return;
    }

    if (!allowedTypes.includes(file.type)) {
        errorMsg.innerHTML = "Invalid file type. Only JPG, PNG, and GIF allowed.";
        return;
    }

    if (file.size > maxFileSize) {
        errorMsg.innerHTML = "File too big. Max size is 2MB.";
        return;
    }

    // Show image preview
    let fileURL = URL.createObjectURL(file);
    imgPreview.src = fileURL;
    imgPreviewContainer.style.display = "block";
}

// Function to delete the selected image
function deleteImage() {
    document.getElementById("Profile_Img").value = ""; // Clear file input
    document.getElementById("imgPreviewContainer").style.display = "none"; // Hide preview
}

// <div>
//                     <label for="Profile_Img">Upload Profile Image: </label>
//                     <!-- <input type="file" placeholder="Profile Image" id="Profile_Img"  class="file_space" accept="image/*"/> -->
//                     <input type="file" placeholder="Profile Image" id="Profile_Img"  class="file_space" onchange="validation_img_file()"/>
//                     <p id="err_img"></p>
//                 </div>
//                 <div id="imgPreviewContainer" style="display: none; position: relative; width: 150px;">
//                   <img id="imgPreview" src="" alt="Profile Preview" style="width: 100%; height: auto; border-radius: 10px;"/>
//                   <button id="deleteImgBtn" onclick="deleteImage()" style="position: absolute; top: 5px; right: 5px; background: red; color: white; border: none; border-radius: 50%; padding: 5px; cursor: pointer;">X</button>
//               </div>